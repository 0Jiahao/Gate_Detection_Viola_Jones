#include "Scheduler.h"
#include "MotionRead.h"
#include <thread>
#include <chrono>
using namespace mav;

/**
 * load_sim_file [load a csv file generated by e.g. matlab for unit testing]
 * @author phil
 * @date   2017-10-27
 */

typedef struct{
    int timestamp;
    float phi;
    float theta;
    float psi;
    float accelX;
    float accelY;
    float accelZ;
    float poseX;
    float poseY;
    float poseZ;
    float posePhi;
    float poseTheta;
    float posePsi;
    float gyrX;
    float gyrY;
    float gyrZ;
}csv_entry_t;
#define MAX_SIZE 100
static void load_sim_file(const char* path,uint16_t size,csv_entry_t entries[MAX_SIZE]){
    //TODO adapt this
    FILE* stream = fopen(path, "r");

    char line[1024];
    for(int i=0;i<size;i++)
    {
        fgets(line, 1024, stream);
        //printf("File %s\n",line);
        float phi,theta,psi,accelX,accelY,accelZ,poseX,poseY,poseZ,posePhi,poseTheta,posePsi,gyrX,gyrY,gyrZ;
        int timestamp;
        sscanf(line, "%d,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f",
               &timestamp,
               &phi,
               &theta,
               &psi,
               &accelX,
               &accelY,
               &accelZ,
               &poseX,
               &poseY,
               &poseZ,
                &posePhi,
                &poseTheta,
                &posePsi,
        &gyrX,
        &gyrY,
        &gyrZ);
        printf("Parsed: %d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%3.f,%.3f,%.3f,%3.f,%3.f,%3.f,%3.f\n",timestamp,phi,theta,psi,accelX,accelY,accelZ,poseX,poseY,poseZ,posePhi,poseTheta,posePsi,gyrX,gyrY,gyrZ);
        entries[i].timestamp = timestamp;
        entries[i].phi = phi;
        entries[i].theta = theta;
        entries[i].psi = psi;
        entries[i].accelX = accelX;
        entries[i].accelY = accelY;
        entries[i].accelZ = accelZ;
        entries[i].poseX = poseX;
        entries[i].poseY = poseY;
        entries[i].poseZ = poseZ;
        entries[i].posePhi = posePhi;
        entries[i].poseTheta = poseTheta;
        entries[i].posePsi = posePsi;
    }
}

int main()
{
    auto filter = new Filter();
    auto comm = Comm();
    uint16_t n_entries = 2000;
    csv_entry_t entries[n_entries];
    load_sim_file("test.csv",n_entries,entries);

    /*Update state every two seconds and run filter loop*/
	for (int i=0; i<n_entries; i++) {

	    auto pose = Pose(entries[i].poseX,entries[i].poseY,entries[i].poseZ,0,0,0);
        MotionRead sensorReading(entries[i].phi, entries[i].theta, entries[i].psi,entries[i].accelX,
        entries[i].accelY, entries[i].accelZ, entries[i].gyrX, entries[i].gyrY, entries[i].gyrZ);
        filter->updateState(pose);
        filter->updateSensorReadings(sensorReading);
        filter->predictStates();
        State estimatedState = filter->getState();
        std::cout << estimatedState.toString() << std::endl ;
		std::this_thread::sleep_for(std::chrono::duration<double>(2));

}    return 0;
}